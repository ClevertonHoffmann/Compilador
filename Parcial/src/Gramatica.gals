#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
letras:[a-zA-Z]
numeros:[0-9]
espaco:[\ \t\n\r]
comentario: "(*" [^ "*" ]* "*)"
#Tokens
id:{letras}({letras}|{numeros}| _ )*
num: {numeros}+ ^ [^ {letras} ]

//pontuação
simb_mult: "*"
simb_soma: "+"
simb_v: ","
simb_apar: "("
simb_fpar: ")"
simb_pv: ";"
simb_acol: "{"
simb_fcol: "}"
simb_maior: ">"
simb_atrib: "="
simb_igual: "=="
simb_dp: ":"

//ignorar espaços em branco e comentários
:{espaco}
:! {comentario}

//*palavras chave*//

begin = id : "begin"
end   = id : "end"
if    = id : "if"
then  = id : "then"
else  = id : "else"
while = id : "while"
do    = id : "do"
write = id : "write"
int   = id : "int"
print = id : "print"
const:{numeros}+





#NonTerminals
<S1>
<S>
<NomePrograma>
<meio>

<comando>
<declaracao>
<atribuicao>
<atribuicaol>
<lista_var>
<lista_varl> 
<IF>
<PRINT>
<expressao_logica>
<T>
<Tlinha>
<fatr>
<fatrd>
#Grammar
<S>::= <NomePrograma> <comando> <meio>;
<NomePrograma>::= id simb_dp;
<meio> ::= <S> |î;

<comando> ::= <declaracao>|<IF>|<atribuicao>|<PRINT>;
<declaracao> ::= int <lista_var> simb_pv;
<lista_var> ::= id <lista_varl>;
<lista_varl> ::= simb_v id | î;
<IF> ::= if simb_apar <expressao_logica> simb_fpar then simb_acol <comando>;
<expressao_logica> ::= <T> <Tlinha>; 
<Tlinha> ::= simb_igual <T> | simb_maior <T>;
<T> ::= id | const; 
<atribuicao> ::=id simb_atrib <atribuicaol> ;
<atribuicaol> ::= ap id simb_mult id simb_fpar simb_soma const simb_pv <fatr>| id simb_soma const simb_pv <fatr>| const simb_pv <fatr>;
<fatr> ::= simb_fcol <fatrd> |î;
<fatrd> ::= else simb_acol | î;
<PRINT> ::= print simb_apar id simb_fpar;



