#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
letras:[a-zA-Z]
numeros:[0-9]
espaco:[\ \t\n\r]
comentario: "(*" [^ "*" ]* "*)"
#Tokens
id:{letras}({letras}|{numeros}| _ )*
const:{numeros}+

//pontuação
v: ","
ap: "("
fp: ")"
pv: ";"
ac: "{"
fc: "}"
dp: ":" 
at: "=" 

//comparadores
maior: ">"
menor: "<"
menorig: "<="
maiorig: ">="
igual: "=="
dif: "!="

//operadores
mult: "*"
soma: "+"
subt: "-"
div: "/"

//ignorar espaços em branco e comentários
:{espaco}

//*palavras chave*//

if      = id : "if"
then    = id : "then"
else    = id : "else"
while   = id : "while"
do      = id : "do"
write   = id : "write"
print   = id : "print"
for     = id : "for"
begin   = id : "begin"
end     = id : "end"
#NonTerminals
<S>
<INICIO>
<CODIGO>
<FIM>
<BLOCO>
<MEIO>
<MEIOL>
<DECL>
<COND>
<LIST>
<LISTL>
<AT>
<AT1>
<COMP>
<COMP1>
<EXP>
//<NomePrograma>
//<meio>
//<comando>
//<declaracao>
//<atribuicao>
//<atribuicaol>
//<lista_var>
//<lista_varl> 
//<IF>
//<PRINT>
//<WHILE>
//<expressao_logica>
//<T>
//<Tlinha>
//<fatr>
//<fatrd>
#Grammar
<S>::= <INICIO> <CODIGO> <FIM>;
<INICIO>::= id dp begin;
<FIM>::= end;
<CODIGO>::= ac <BLOCO> fc;
<BLOCO>::= <MEIO> <BLOCO> | î;
<MEIO>::= id <MEIOL> | <COND>; 
<MEIOL>::= id <DECL> | at <AT>;
<DECL>::= pv | v <MEIOL> | î;
<AT>::= <AT1> pv;
<AT1>::= id <EXP>|const <EXP>;
<EXP>::= soma <AT1>| mult <AT1>| div <AT1>| subt <AT1>|î;
//condição
<COND>::= if ap <COMP> fp then; 
<COMP>::= id <COMP1> ;
<COMP1>::= igual id| maior id| menor id| maiorig id| menorig id |î;
//laços
//<LACO>::=
//<EXP>::= 





//id <comando> <meio>;
//<meio> ::= <S> |î;
//<comando> ::= <declaracao>|<atribuicao>|<IF>|<WHILE>|<PRINT>;

//<declaracao> ::= tip <lista_var> pv;
//<lista_var> ::= id <lista_varl>;
//<lista_varl> ::= v id | î;
//<atribuicao> ::=id at <atribuicaol> ;


//<atribuicaol> ::= ap id mult id fp soma const pv <fatr>| id soma const pv <fatr>| const pv <fatr>;
//<fatr> ::= fc <fatrd> |î;
//<fatrd> ::= else ac | î;

//<IF> ::= if ap <expressao_logica> fp then ac <comando>;
//<expressao_logica> ::= <T> <Tlinha>; 
//<Tlinha> ::= igual <T> | maior <T>;
//<T> ::= id | const; 


//<PRINT> ::= print ap id fp;



